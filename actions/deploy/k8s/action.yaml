name: Kubernetes Deployment
description: Deploy Helm chart to Kubernetes
inputs:
  VAULT_SERVER:
    description: Build Image Tag
    required: true
  VAULT_TOKEN: 
    description: Vault Token
    required: true
  VAULT_SECRET_PATH:
    description: Dev Secret Path
    required: true
  VAULT_SECRET_COMMON_PATH:
    description: K8s common Secret Path
    required: true
  VAULT_SECRETS_CICD_PATH:
    description: Vault Secrets Path
    required: true
  IMAGE_TAG:
    description: Image Tag
    required: true
  REPLICAS:
    description: Default Replica
    required: true
    default: '1'
  DATACENTER:
    description: Datacenter
    required: true
  LOCAL_SETTINGS:
    description: Enable it if local settings is required to download
  EXTRA_HELM_ARGS_1:
    description: Extra Helm Arguments
  EXTRA_HELM_ARGS_2:
    description: Extra Helm Arguments
  EXTRA_HELM_ARGS_3:
    description: Extra Helm Arguments
runs:
  using: composite
  steps:
  - name: Import Secrets From Vault
    uses: hashicorp/vault-action@v2
    with:
      url: https://${{ inputs.VAULT_SERVER }}/
      token: ${{ inputs.VAULT_TOKEN }}
      tlsSkipVerify: true
      secrets: |
        ${{ inputs.VAULT_SECRET_COMMON_PATH }} ENVIRONMENT | ENVIRONMENT;
        ${{ inputs.VAULT_SECRET_COMMON_PATH }} ECR_REPOSITORY | ECR_REPOSITORY;
        ${{ inputs.VAULT_SECRET_COMMON_PATH }} PROJECT_NAME | PROJECT_NAME;
        ${{ inputs.VAULT_SECRET_COMMON_PATH }} VERSION | VERSION;
        ${{ inputs.VAULT_SECRET_COMMON_PATH }} LOGSTASH_IP | LOGSTASH_IP;
        ${{ inputs.VAULT_SECRET_COMMON_PATH }} GITLAB_PROJECT_NUMBER | GITLAB_PROJECT_NUMBER;
        ${{ inputs.VAULT_SECRET_COMMON_PATH }} LOCAL_SETTINGS_NAME | LOCAL_SETTINGS_NAME;
        ${{ inputs.VAULT_SECRET_COMMON_PATH }} IMAGE_REPOSITORY | IMAGE_REPOSITORY;
        ${{ inputs.VAULT_SECRET_PATH }} MASTER_IP | MASTER_IP;
        ${{ inputs.VAULT_SECRET_PATH }} NODE_PORT | NODE_PORT;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }}  AWS_ACCESS_KEY_ID_ECR | AWS_ACCESS_KEY_ID_ECR;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }}  AWS_SECRET_ACCESS_KEY_ECR | AWS_SECRET_ACCESS_KEY_ECR;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }}  SSH_KEY | SSH_KEY;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }}  REGISTRY | REGISTRY;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }}  GITLAB_TOKEN | GITLAB_TOKEN;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }}  GITLAB_SERVER | GITLAB_SERVER;
  
  - name: Install SSH Key
    uses: shimataro/ssh-key-action@v2
    with:
      key: ${{ env.SSH_KEY }}
      known_hosts: 'SSH KEY'
      if_key_exists: replace
  
  - name: Add Known Hosts
    run: |
      ssh-keyscan -H ${{ env.MASTER_IP }} >> ~/.ssh/known_hosts
    shell: bash

  - name: Extract Kubeconfig file
    run: |
      scp root@${{ env.MASTER_IP }}:/etc/rancher/rke2/rke2.yaml kubeconfig.yaml
      sed -i "s|https://127.0.0.1:6443|https://${{ env.MASTER_IP }}:6443|g" kubeconfig.yaml
    shell: bash
  
  - name: Create Namespace
    run: |
      export KUBECONFIG=kubeconfig.yaml
      if ! kubectl get namespace '${{ env.PROJECT_NAME }}' &> /dev/null; then
        kubectl create namespace "${{ env.PROJECT_NAME }}"
      else
        echo "Namespace ${{ env.PROJECT_NAME }} already exists."
      fi
    shell: bash
  
  - name: Create configmap and secrets
    run: |
      ${{ github.action_path }}/scripts/config.sh
    shell: bash
    env:
      VAULT_TOKEN: ${{ inputs.VAULT_TOKEN }}
      VAULT_SERVER: ${{ inputs.VAULT_SERVER }}
      VAULT_SECRET_PATH: ${{ inputs.VAULT_SECRET_PATH }}
      VAULT_SECRET_COMMON_PATH: ${{ inputs.VAULT_SECRET_COMMON_PATH }}
      LOCAL_SETTINGS: ${{ inputs.LOCAL_SETTINGS }}
  
  - name: Login to ECR
    uses: docker/login-action@v1
    with:
      registry: ${{ env.REGISTRY }}
      username: ${{ env.AWS_ACCESS_KEY_ID_ECR }}
      password: ${{ env.AWS_SECRET_ACCESS_KEY_ECR }}
 
  - name: Deploy to K8s Cluster
    run: |
      export KUBECONFIG=kubeconfig.yaml
      helm upgrade ${{ env.PROJECT_NAME }} --install oci://${{ env.REGISTRY }}/${{ env.ECR_REPOSITORY }} --version ${{ env.VERSION }} --set replicas=${{ inputs.REPLICAS }} \
      --namespace=${{ env.PROJECT_NAME }} --set nameOverride=${{ env.PROJECT_NAME }} --set image.repository=${{ env.IMAGE_REPOSITORY }}/${{ github.repository }}-${{ env.ENVIRONMENT }}:${{ inputs.IMAGE_TAG }} \
      --set service.nodePort=${{ env.NODE_PORT }} --set dc=${{ inputs.DATACENTER }} --set sidecar.filebeat.logstashIp=${{ env.LOGSTASH_IP }} --set sidecar.filebeat.logstashPort=5045 ${{ inputs.EXTRA_HELM_ARGS_1 }} ${{ inputs.EXTRA_HELM_ARGS_2 }} ${{ inputs.EXTRA_HELM_ARGS_3 }}
    shell: bash
